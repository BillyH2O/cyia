generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                  String               @id @default(cuid())
  name                String?
  email               String?              @unique
  emailVerified       DateTime?
  image               String?
  password            String?
  accounts            Account[]
  chats               Chat[]
  analyticsEntries    ChatAnalyticsEntry[]
  passwordResetTokens PasswordResetToken[]
  sessions            Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Chat {
  id               String               @id @default(cuid())
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
  title            String?
  userId           String
  user             User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  analyticsEntries ChatAnalyticsEntry[]
  messages         Message[]
}

model Message {
  id             String   @id @default(cuid())
  createdAt      DateTime @default(now())
  content        String
  role           String
  processingTime Float?
  model          String?
  chatId         String
  chat           Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  sources        Source[]
}

model Source {
  id        String  @id @default(cuid())
  content   String
  metadata  Json?
  messageId String
  message   Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  expires   DateTime
  userId    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ChatAnalyticsEntry {
  id               String   @id @default(cuid())
  createdAt        DateTime @default(now())
  modelUsed        String
  wasStreaming     Boolean  @default(false)
  evaluateSources  Boolean  @default(false)
  useReranker      Boolean  @default(false)
  useMultiQuery    Boolean  @default(false)
  processingTime   Float?
  chatId           String
  userId           String
  completionTokens Int?
  cost             Float?
  promptTokens     Int?
  totalTokens      Int?
  temperature      Float?   @default(1.0)
  chat             Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
